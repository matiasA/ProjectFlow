// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo para usuarios
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Campo para almacenar la contraseña hasheada
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  chats         Chat[]
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
}

// Modelo para cuentas vinculadas con proveedores OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo para sesiones activas
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo para tokens de verificación
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo para proyectos
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats       Chat[]
  folders     Folder[]
}

// Modelo para carpetas
model Folder {
  id        String   @id @default(cuid())
  name      String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chats     Chat[]
}

// Modelo para chats
model Chat {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String?
  folderId    String?
  userId      String
  context     String?
  llmProvider String    @default("openai")
  messages    Message[]
  project     Project?  @relation(fields: [projectId], references: [id])
  folder      Folder?   @relation(fields: [folderId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo para mensajes
model Message {
  id        String   @id @default(cuid())
  content   String
  role      String   // user, assistant, system
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// Modelo para claves de API de LLMs
model ApiKey {
  id        String   @id @default(cuid())
  name      String
  provider  String   // openai, anthropic, mistral, lmstudio, etc.
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
